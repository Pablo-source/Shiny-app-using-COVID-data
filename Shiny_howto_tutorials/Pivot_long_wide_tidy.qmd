---
title: "Pivot Long Wide DPLYR"
author: "Pablo Leon-Rodenas |pablo.leonrodenas@nhs.net"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    html-math-method: katex
    code-fold: false
    editor: source
    code-block-bg: true
    code-block-border-left: "#31BAE9"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
                      dpi = 180, fig.width = 8, fig.height = 5)
library(tidyverse)
```

## Pivoting data

This is a tutorial on how to transform data from **long** to **wide** and the other way around, from **wide** to **long** format.

We will use `{tidyr}` package from `{tidyverse}` to access these two specific functions: **pivot_longer()** and **pivot_wider()**.

-   *pivot_longer():* "Lengthens" data, increasing the number of rows and decreasing the number of columns. Reference: <https://tidyr.tidyverse.org/reference/pivot_longer.html>

-   *pivot_wider():* "Widens" data, increasing the number of columns and decreasingt he number of rows. Reference: <https://tidyr.tidyverse.org/reference/pivot_wider.html>

## Functions used to pivot data

To pivot data from wide to long we use *pivot_longer()* function, and to pivot data from long to wide we use *pivot_wider()* function.

## Create initial dataset to change format

We define this new data set to apply both functions to transform its shape from wide to long and the other way around:

**Long format data set**

In the long format, each row is one time point per subject. So each subject (county) will have data in multiple rows. Any variables that don't change across time will have the same value in all rows.

You can see the same four counties' data below in the long format. Each county has four rows of data--one for each year.We have just set up the data differently.

We no longer need four columns for each year of data. Instead, all four years for each county are stacked--they're all in the Year column.

Source:<https://www.theanalysisfactor.com/wide-and-long-data/>

```{r Initital_long_dataset}
Country <-c("Spain","Spain","France","France","India","Germany")
Year <-c(1970,1980,1970,1980,1970,1970)
Views <-c(100,2261,6725,800,526,312)

data_views_a <-cbind.data.frame(Country,Year,Views)
data_views_a
```

**Wide format data set**

In the **Wide** data set format, each subject reponse, when they present repeated responses, are displayed in a **SINGLE** row, displaying **SEVERAL** columns for each separate reponse.

```{r Initital_wide_dataset}
religion <-c("Agnostic","Atheist","Buddhist","Catholic","Evangelical","Hindu")
SL_10K <- c(27,12,27,418,575,1)
S10k_20k <- c(34,27,21,617,9,32)
S20k_30K <- c(60,37,30,732,7,24)
S30k_40K <-c(81,52,34,982,9,39)
data_views_b <-cbind.data.frame(religion,SL_10K,S10k_20k,S20k_30K,S30k_40K)
data_views_b
```

## 1. Pivot wider

We use **pivot_wider()** function to turn a data set from long into **wide** format.

Initial data set to be transformed

```{r initial long dataset, echo=TRUE}
data_views_a
```

Using "pivot_wider()" function requires to fill in two parameters:

-   **names_from**: Argument describing which column (or columns) to get the name of the output column from. Is the column containing variables we want to see as ROWS.

-   **values_from**: Argument describing which column (or columns) to get the *values* of the output columns

```{r pivot_long_TO_WIDE, echo=TRUE}
data_wide <- data_views_a %>% 
  pivot_wider(names_from = Year, values_from = Views)
data_wide
```

In a wider format data frame we have one row per country and several columns for years

## 2. Pivot longer

Initial data set to transform

```{r}
data_views_b
```

Using "pivot_longer()" function requires to fill two parameters:

-   **names_to**: The original variables on *different columns* will be grouped into a SINGLE column, in this instance called "Salary".

-   **cols**: This argument contains all columns we want to turn into rows. We start on the **first NUMERIC** column and end on the last numeric column. Identified by the slicing command ":" we define **last** column as **ncol(dataset)** to get the **output** columns values. For example: `cols = 2:ncol(data_set)`

We use **pivot_longer()** function to turn data sets from wide into LONG format.

```{r Pivot longer,echo=TRUE}
data_longer <- data_views_b %>% 
               pivot_longer(names_to ="Salary",
                            cols = 2:ncol(data_views_b))
data_longer
```

## Online resources

-   Reshape in R- Long/Wide format <https://libguides.princeton.edu/R-reshape>
-   Tidyr package <https://github.com/tidyverse/tidyr>
-   Pivot longer function <https://tidyr.tidyverse.org/reference/pivot_longer.html>
-   Pivot wider function <https://tidyr.tidyverse.org/reference/pivot_wider.html>

## GitHub project using TIDY verbs

-   COVID19 Shiny app <https://github.com/Pablo-source/Shiny-app-using-COVID-data/blob/main/00%20Maps%20data%20prep_SHINY.R>
