---
title: "group_by() and ungroup() functions"
author: "Pablo Leon-Rodenas |pablo.leonrodenas@nhs.net"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    html-math-method: katex
    code-fold: false
    editor: source
    code-block-bg: true
    code-block-border-left: "#31BAE9"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
                      dpi = 180, fig.width = 8, fig.height = 5)
library(tidyverse)
```

## Grouping data by certain variables 

When working with data sets, we might want to compute certain calculations by groups. We start declaring the variables we want to group data by, in this example by sex **'group_by(Sex)'** for our calculations. If we wanted to group data by two or more variables we just include them in this stament, by sex and country would be: **'group_by(Sex,country)'**.

Then we perform the specific calculations using 'summarise()' function from {dplyr}. This function creates a new data frame. Returning one row for each combination of grouping variables. If there are no groping variables, the output will have a single row summarizing all observations. In the example below we use **'sum()'** function (Sum of vector elements) to return the sum of all the values present in its arguments.

It is extremely important to include **ungroup()** when you have finished with your calculations. See script "Group_by_ungroup_sunmmary_example.R" for the script example.

These are the details:

## The importance of using **ungroup()** after the group_by() command

The **ungroup()** function is always used after the **group_by()** command after performing calculations.

```{r Daily cases by day(not using ungroup)}
# Left join with non matching values 
METRICSD_aus_sum <- METRICS_DAILY_aus_19 %>% 
           select(Country, Lat,Long,date,Confirmed,Recovered,Deaths)%>% 
           group_by(Country,date) %>%
  summarise(
              Confirmed_d = sum(Confirmed),
              Recovered_d = sum(Recovered),
              Deaths_d = sum(Deaths))

METRICSD_aus_sum
str(METRICSD_aus_sum)
```
Let's see what this data set looks like

```{r Daily cases displayed}
# Left join with non matching values 
METRICSD_aus_sum 
```

If we then try to compute a **lag()** calculation on this grouped data set

```{r Daily cases displayed}
# Left join with non matching values 
METRICSD_aus_sum <- METRICS_DAILY_aus_19 %>% 
           select(Country, Lat,Long,date,Confirmed,Recovered,Deaths)%>% 
           group_by(Country,date) %>%
  summarise(
              ConD = Confirmed - lag(Confirmed, n=1)
  )

METRICSD_aus_sum
```






If you forget to ungroup() data, future data management will likely produce errors.


### data sets used in the left join

In this example below, base data set has one row "D" that is not present in the new data set. As this is a **left** join, this observation from the base data set is retained in the join.



```{r new data set}
Marca <-c("A","B","C")
Desc<-c("30%","50%","30%")
New <-cbind.data.frame(Marca,Desc)
New
```

### Left join

Now we perform a LEFT join on the above two data sets. We declare both base and new data set **inside** the `left_join()` function adding also `by = join_by(NHSCode == Org_Code_For_Join)` to specify join is based on different set of variables. As C variable is only present in the New data set, the left join returns a NA value for Desc variable value.

```{r left join different variable}

Ljoin <-left_join(Base,New,
                   by = join_by(Brand == Marca))
Ljoin
```

### Right join

This second example is a right join with non matching values. All variables from new data set are retained, and variables from the base data set that match the observations are added.

### data sets used in the right join

In this example base data set has one row "D" that is not present in the new data set. This is a **right** join, meaning we obtain row "C" only present in the new data set, and with it comes variable "Desc" that belongs to the new data set included by the right join.

```{r Base data set right join}
Brand <-c("A","B","D")
Price<-c(10,41,65)
Base <-cbind.data.frame(Brand,Price)
Base
```

```{r new data set right join}
Marca <-c("A","B","C")
Desc<-c("30%","50%","30%")
New <-cbind.data.frame(Marca,Desc)
New
```

Performing a right join

```{r right join by different variable}
Rjoin <-right_join(Base,New,by = join_by(Brand == Marca))
Rjoin
```

As Brand D is present in the *base* data set but **Not** present in the *new* data set, as we do a **right** join adding records from *new* data set, we see this **Brand D** **NOT** appearing in the merged data set, because we have performed a **right** join.

Performing a **left** join produces NULL values on **Desc** variable that was coming from the *new* data set. Performing a **right** join produces NULL vallues on **Price** variable that was coming from the *base* data set.

Performing a left join

```{r left join by different variable}
Ljoin <-left_join(Base,New,by = join_by(Brand == Marca))
Ljoin
```

### Inner join

The third example is an **inner join** with non matching values. This merge only return **COMMON** rows in **BOTH** base and new data sets.

```{r Base data set inner join}
Brand <-c("A","B","C")
Price<-c(10,41,65)
Base <-cbind.data.frame(Brand,Price)
Base
```

And this is the new data set

```{r New data set inner join}
Marca <-c("A","B","D")
Desc<-c("30%","50%","10%")
New <-cbind.data.frame(Marca,Desc)
New
```

We perform an inner join based on two unique id variables, as these unique id variables have different names in both Base and New datases.

```{r Inner join, echo = TRUE}
Inner_join <-inner_join(Base,New,by = join_by(Brand == Marca))
Inner_join
```

### Full join

In a Full Join, we include rows in *either* base *or* new data sets, matching on key (unique ID) variables. As before this unique ID variable has different names on each data sets.

The Full join creates NAs in missing columns if no match is present.

```{r Base data set Full join, echo=TRUE}
Brand <-c("A","B","C")
Price<-c(10,41,65)
Base <-cbind.data.frame(Brand,Price)
Base
```

```{r New data set Full join, echo=TRUE}
Marca <-c("A","B","D")
Desc<-c("30%","50%","10%")
New <-cbind.data.frame(Marca,Desc)
New
```

Performing a **full** join produces NULL values on variables coming from **either** the **Base** data set or the **New** data set. A full join will create **NA** in **BOTH** Base and New data sets for non-matching records.

```{r Full join script,echo=TRUE}
Full_join <-full_join(Base,New,by = join_by(Brand == Marca))
Full_join
```

## Semi Join and Anti Join

### Semi join

Semi joins are the opposite of anti joins.A semi join returns the rows of the first table where it can find a match in the second table.

```{r Base data set semi join, echo=TRUE}
Brand <-c("A","B","C")
Price<-c(10,41,65)
Base <-cbind.data.frame(Brand,Price)
Base
```

```{r New data set semi join, echo=TRUE}
Marca <-c("A","B","D")
Desc<-c("30%","50%","10%")
New <-cbind.data.frame(Marca,Desc)
New
```

Performing a semi join returns only the rows with **matching records** in **both** Base and New data sets.

```{r Semi join, echo=TRUE}
Semi_join <-semi_join(Base,New,by = join_by(Brand == Marca))
Semi_join
```

## Online resources

-   R For Graduate Students. 6.3.3 Ungrouping:
<https://bookdown.org/yih_huynh/Guide-to-R-Book/groupby.html>

